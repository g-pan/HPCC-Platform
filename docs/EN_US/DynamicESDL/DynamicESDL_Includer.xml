<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book lang="en_US" xml:base="../">
  <bookinfo>
    <title>Dynamic ESDL</title>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/redswooshWithLogo2.jpg" />
      </imageobject>
    </mediaobject>

    <author>
      <surname>Boca Raton Documentation Team</surname>
    </author>

    <legalnotice>
      <para>We welcome your comments and feedback about this document via
      email to <email>docfeedback@hpccsystems.com</email></para>

      <para>Please include <emphasis role="bold">Documentation
      Feedback</emphasis> in the subject line and reference the document name,
      page numbers, and current Version Number in the text of the
      message.</para>

      <para>LexisNexis and the Knowledge Burst logo are registered trademarks
      of Reed Elsevier Properties Inc., used under license.</para>

      <para>HPCC Systems<superscript>®</superscript> is a registered trademark
      of LexisNexis Risk Data Management Inc.</para>

      <para>Other products, logos, and services may be trademarks or
      registered trademarks of their respective companies.</para>

      <para>All names and example data used in this manual are fictitious. Any
      similarity to actual persons, living or dead, is purely
      coincidental.</para>

      <para></para>
    </legalnotice>

    <xi:include href="common/Version.xml"
                xpointer="xpointer(//*[@id='FooterInfo'])"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="common/Version.xml"
                xpointer="xpointer(//*[@id='DateVer'])"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <corpname>HPCC Systems<superscript>®</superscript></corpname>

    <xi:include href="common/Version.xml"
                xpointer="xpointer(//*[@id='Copyright'])"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <mediaobject role="logo">
      <imageobject>
        <imagedata fileref="images/LN_Rightjustified.jpg" />
      </imageobject>
    </mediaobject>
  </bookinfo>

  <chapter>
    <title>Dynamic ESDL</title>

    <para>Dynamic ESDL (Enterprise Service Description Language) is a
    methodology that helps you develop and manage web-based query interfaces
    quickly and consistently.</para>

    <para>Dynamic ESDL takes an interface-first development approach. It
    leverages the ESDL Language to create a common interface "contract" that
    both Roxie Query and Web interface developers will adhere to. It is
    intended to allow developers to create production web services, with clean
    interfaces that can evolve and grow over time without breaking existing
    applications.</para>

    <para>ESDL's built-in versioning support helps ensure compiled and
    deployed applications continue to operate while changes are made to the
    deployed service's interface for new functionality.</para>

    <para>ESDL's ability to define and reuse common structures helps maintain
    consistent interfaces across methods.</para>

    <para>The Dynamic ESDL service is built to scale horizontally, and hooks
    are provided to add custom logging and security to help create fully
    "productionalized" web services.</para>

    <para>Once a service is deployed, application developers and end-users can
    consume the service using REST, JSON, XML, SOAP, or form encoded posts.
    Dynamic ESDL provides quick and easy access to a WSDL, live forms, sample
    requests and responses, and testing interfaces to allow developers to test
    logic changes, data changes, or new features, as well as to interact with
    the service directly using SOAP, XML, or JSON.</para>

    <para>Dynamic ESDL is an integral part of ESP.</para>
  </chapter>

  <chapter id="DESDLWorkflowTutorial">
    <title>Dynamic ESDL Workflow Tutorial</title>

    <sect1 id="DESDLBefore" role="nobrk">
      <title>Before You Begin...</title>

      <para>You will need:</para>

      <itemizedlist>
        <listitem>
          <para>Access to an HPCC Systems Cluster (version 7.0 or later). This
          can be one running in a Virtual Machine.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>Access to ECL Watch and WsECL (using a browser).</para>

          <para>For purposes of this tutorial, we assume that you know how to
          submit a published query using WsECL.</para>
        </listitem>

        <listitem>
          <para>The ECL IDE (version 7.0 or later)</para>

          <para>You won't need to know the ECL or ESDL languages to follow the
          steps in this book, but you will need to understand both to develop
          dESDL-based applications.</para>

          <para>For purposes of this tutorial, you should know the basics of
          using the ECL IDE including how to add files to your repository, how
          to compile ECL Code, and how to publish a compiled query.</para>
        </listitem>
      </itemizedlist>

      <para><emphasis role="bold">dESDL and LDAP Security</emphasis></para>

      <para>If your HPCC Systems platform is configured to use LDAP security,
      you must ensure any user who will be publishing ESDL Definitions has
      Access to <emphasis role="bold">ESDL configuration service</emphasis>
      set to <emphasis role="bold">Allow Full</emphasis>, as shown
      below.</para>

      <para><graphic fileref="images/desdl-LDAP.jpg" /></para>

      <para></para>
    </sect1>

    <sect1 id="DESDLWorkflowOverview">
      <title>Overview</title>

      <para>In this tutorial, we will:</para>

      <para></para>

      <itemizedlist>
        <listitem>
          <para>Write an ESDL Service Definition using the editor in the ECL
          IDE.</para>

          <para></para>
        </listitem>

        <listitem>
          <para>Generate ECL from the ESDL Service Definition within the ECL
          IDE.</para>

          <para>This step automatically generates an ECL file in your ECL
          repository. You will use the definitions in that ECL file when you
          write the ECL query that will deliver the result (the business
          logic).</para>
        </listitem>

        <listitem>
          <para>Write the ECL for the business logic of the query, compile it,
          and then publish the query to a Roxie cluster.</para>

          <para></para>
        </listitem>

        <listitem>
          <para>Publish the Dynamic ESDL definition from the ECL IDE.</para>

          <para></para>
        </listitem>

        <listitem>
          <para>Bind the service methods to the Roxie queries in ECLWatch
          using an XML formatted configuration.</para>

          <para></para>
        </listitem>
      </itemizedlist>

      <para></para>
    </sect1>

    <sect1 id="ESDL_Configuration">
      <title>ESDL Configuration</title>

      <para>The Configuration for Dynamic ESDL is an integral part of ESP.
      Therefore, special configuration is not really necessary for basic ESDL
      definitions. In Configuration Manager there are some configuration
      elements that you can customize.</para>

      <para>To customize your Dynamic ESDL set up In Configuration
      Manager</para>

      <para><orderedlist>
          <listitem>
            <para>Go to the <emphasis role="bold">ESP - myesp</emphasis> page
            then select Service bindings.</para>
          </listitem>

          <listitem>
            <para>Select the <emphasis role="bold">ESP Service
            Bindings</emphasis> Tab</para>
          </listitem>
        </orderedlist>The default ESP Service Bindings tab lists the service
      bindings. Among the bindings listed there is the DESDLBindingTemplate.
      This binding is a template, and provides a default configuration for all
      DESDL bindings that you’re going to add on any port. Although the
      template binding is set to use port 0, there is no binding created on
      port 0, the template only exists to provide a default configuration.
      <graphic fileref="images/desdl-Config01.png" /></para>

      <para>You can customize the template to suit your needs. For example,
      you can set up LDAP security or logging that will apply to all bindings.
      If you wanted to have a custom configuration that is different from this
      generic template, for instance to bind to Port 8020 that will use a
      different LDAP server, you can add another DESDL binding template on
      port 8020.</para>

      <orderedlist>
        <listitem>
          <para>Right-click and choose <emphasis role="bold">Add</emphasis> on
          the ESP Service Bindings tab</para>
        </listitem>

        <listitem>
          <para>Click on the field in the <emphasis
          role="bold">service</emphasis> column to select DESDL Service
          Template from the drop list</para>
        </listitem>

        <listitem>
          <para>Click on the <emphasis role="bold">port</emphasis> column and
          set the port number as desired, for example, port 8020</para>
        </listitem>
      </orderedlist>

      <para>This template will override the template on port 0 and will
      provide configuration for the dynamic bindings on port 8020.</para>
    </sect1>

    <sect1 id="DESDLWriteDef">
      <title>Write the ESDL Service Definition</title>

      <para>In this portion of the tutorial, we will write the Service
      Definitions in the ECL IDE. The program listing below shows an ESDL
      service called <emphasis>MathService</emphasis>. It contains one method,
      <emphasis>AddThis</emphasis>, with a request and a response
      defined.</para>

      <orderedlist>
        <listitem>
          <para>Start the ECL IDE (Start &gt;&gt; All Programs &gt;&gt; HPCC
          Systems &gt;&gt; ECL IDE )</para>
        </listitem>

        <listitem>
          <para>Log in to your environment</para>
        </listitem>

        <listitem>
          <?dbfo keep-together="always"?>

          <para>Right-click on the <emphasis role="bold">My Files</emphasis>
          folder in the Repository window, and select <emphasis
          role="bold">Insert Folder</emphasis> from the pop-up menu.</para>

          <para><figure>
              <title>Insert Folder</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/desdl-insertFolder.jpg" />
                </imageobject>
              </mediaobject>
            </figure></para>

          <para>For purposes of this tutorial, let's create a folder called
          <emphasis role="bold">MathService</emphasis>.</para>
        </listitem>

        <listitem>
          <?dbfo keep-together="always"?>

          <para>Enter <emphasis role="bold">MathService</emphasis> for the
          label, then press the <emphasis role="bold">OK</emphasis>
          button.</para>

          <para><figure>
              <title>Enter Folder Label</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/desdl-insertFolder2.jpg" />
                </imageobject>
              </mediaobject>
            </figure></para>
        </listitem>

        <listitem>
          <para>Right-click on the <emphasis role="bold">MathService
          </emphasis>folder, and select <emphasis role="bold">Insert
          File</emphasis> from the pop-up menu.</para>
        </listitem>

        <listitem>
          <?dbfo keep-together="always"?>

          <para>Enter <emphasis role="bold">MathService</emphasis> for the
          label, select <emphasis>ESDL</emphasis> as the <emphasis
          role="bold">Type</emphasis>, then press the <emphasis
          role="bold">OK</emphasis> button.</para>

          <para><figure>
              <title>Insert File</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/desdl-insertFile.jpg" />
                </imageobject>
              </mediaobject>
            </figure></para>

          <para>An Editor Window opens.</para>

          <para><figure>
              <title>ESDL file</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/desdl-newDESDL.jpg" />
                </imageobject>
              </mediaobject>
            </figure></para>

          <para>Notice that some text has been written for you in the
          window.</para>

          <para></para>
        </listitem>
      </orderedlist>

      <?hard-pagebreak ?>

      <orderedlist continuation="continues">
        <listitem>
          <para><?dbfo keep-together="always"?>Write the following code,
          replacing what was written, in the editor workspace :</para>

          <para><programlisting>ESPservice [auth_feature("None")]  MathService
{
  ESPmethod AddThis(AddThisRequest, AddThisResponse);
};

ESPrequest AddThisRequest 
{
  int  FirstNumber;
  int  SecondNumber;
};
    
ESPresponse AddThisResponse 
{
  int  Answer;
};
</programlisting> <figure>
              <title>ESDL Code in Editor Window</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/desdl-codeInEditor.jpg" />
                </imageobject>
              </mediaobject>
            </figure></para>
        </listitem>

        <listitem>
          <para><?dbfo keep-together="always"?>Save the file using <emphasis
          role="bold">ctrl+s</emphasis> or the <emphasis role="bold">File
          &gt;&gt; Save</emphasis> menu option.</para>

          <para>Notice that a new ECL file is now in the repository folder.
          Saving the ESDL file automatically generated a file named
          <emphasis>MathService.ecl</emphasis> in the current directory. You
          could generate this ECL using the dropdown button and selecting
          <emphasis role="bold">Generate ECL</emphasis>.</para>

          <para><figure>
              <title>Saving an ESDL file generates ECL</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/desdl-saveESDLFile.jpg" />
                </imageobject>
              </mediaobject>
            </figure></para>

          <para>This provides the ECL Structures you will IMPORT and use in
          the ECL code you write to support the service method.</para>
        </listitem>
      </orderedlist>
    </sect1>

    <sect1>
      <title>Writing the ECL</title>

      <para>First, let's examine the generated ECL code in
      MathService.ecl.</para>

      <programlisting><emphasis role="green">/*** Not to be hand edited (changes will be lost on re-generation) ***/
/*** ECL Interface generated by esdl2ecl version 1.0 from MathService.xml. ***/
/*===================================================*/</emphasis>

export MathService := MODULE

export t_AddThisRequest := record
  integer FirstNumber {xpath('FirstNumber')};
  integer SecondNumber {xpath('SecondNumber')};
end;

export t_AddThisResponse := record
  integer Answer {xpath('Answer')};
end;
end;

<emphasis role="green">/*** Not to be hand edited (changes will be lost on re-generation) ***/
/*** ECL Interface generated by esdl2ecl version 1.0 from MathService.xml. ***/
/*===================================================*/</emphasis>
</programlisting>

      <para>Notice it created a file named MathService.ecl which has defined a
      MODULE named MathService. Remember in ECL, the name of the file
      (MathService) <emphasis>must always exactly match</emphasis> the name of
      the single EXPORT definition (MathService) contained in that
      file.</para>

      <para>Next, we will write the ECL code to support the functionality of
      the AddThis method. We will IMPORT the MathService module and reference
      the request and response structures.</para>

      <para><orderedlist>
          <listitem>
            <para>Right-click on the <emphasis role="bold">MathService
            </emphasis>Folder, and select <emphasis role="bold">Insert
            File</emphasis> from the pop-up menu.</para>
          </listitem>

          <listitem>
            <para>Enter <emphasis role="bold">AddThis</emphasis> for the
            label, select <emphasis>ECL</emphasis> as the <emphasis
            role="bold">Type</emphasis>, then press the <emphasis
            role="bold">OK</emphasis> button.</para>

            <para>An Editor Window opens.</para>
          </listitem>

          <listitem>
            <para>Write ECL to support the service:</para>

            <programlisting>IMPORT MathService;
rec_in := MathService.MathService.t_AddThisRequest;

First_Row := ROW ([], rec_in) : STORED ('AddThisRequest', FEW);

res:= first_row.FirstNumber + first_row.SecondNumber; 
ds_out := ROW ({res},MathService.MathService.t_AddThisResponse);
OUTPUT(ds_out, NAMED('AddThisResponse')); </programlisting>
          </listitem>

          <listitem>
            <?dbfo keep-together="always"?>

            <para>Using the <emphasis role="bold">Target</emphasis> drop list,
            select <emphasis>Roxie</emphasis> as the Target cluster.</para>

            <para><figure>
                <title>Target Roxie</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/desdl-targetRoxie.jpg" />
                  </imageobject>
                </mediaobject>
              </figure></para>
          </listitem>

          <listitem>
            <para>In the Builder window, in the upper left corner the
            <emphasis role="bold">Submit</emphasis> button has a drop down
            arrow next to it. Select the arrow, then select <emphasis
            role="bold">Compile</emphasis>.</para>

            <figure>
              <title>Compile</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/desdl-compileService.jpg" />
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>

          <listitem>
            <para><?dbfo keep-together="always"?>When the workunit finishes,
            it will display a green circle indicating it has compiled.</para>

            <para><figure>
                <title>Compiled</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/desdl-compiled.jpg" />
                  </imageobject>
                </mediaobject>
              </figure></para>
          </listitem>

          <listitem>
            <para>Select the workunit tab for the AddThis workunit that you
            just compiled.</para>

            <para>This opens the workunit in an ECL Watch tab.</para>
          </listitem>

          <listitem>
            <para>Press the <emphasis role="bold">Publish</emphasis> action
            button, then verify the information in the dialog and press
            <emphasis role="bold">Submit</emphasis>.</para>

            <para><figure>
                <title>Publish Query</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/desdl-publishQuery.jpg" />
                  </imageobject>
                </mediaobject>
              </figure>This publishes the AddThis query to the Roxie.</para>
          </listitem>

          <listitem>
            <para>Test the service using WsECL :<programlisting>http://&lt;<emphasis>esp ip </emphasis>&gt;:8002 </programlisting></para>

            <para>Find the <emphasis>addthis</emphasis> service under the
            Roxie, Target, Active Queries.</para>
          </listitem>
        </orderedlist></para>
    </sect1>

    <sect1 id="DESDLPublishandBind">
      <title>Publish the ESDL Service Definitions and Bind the ESDL
      Service</title>

      <para>In this portion of the tutorial, we will publish the ESDL Service
      definitions to the System Data Store and bind the methods to the
      published Roxie query.</para>

      <para><orderedlist>
          <listitem>
            <para>Open the Dynamic ESDL definition file (MathService.esdl) in
            the ECL IDE.</para>
          </listitem>

          <listitem>
            <para>Press the <emphasis role="bold">Publish</emphasis>
            button.</para>

            <para>This publishes the ESDL Service definition to the ESP
            Server. Next we will bind the <emphasis>AddThis</emphasis> method
            to the <emphasis>AddThis</emphasis> published query.</para>

            <para></para>
          </listitem>

          <listitem>
            <para>Open ECL Watch in your browser (&lt;your ESP
            ip&gt;:8010)</para>

            <para></para>
          </listitem>

          <listitem>
            <para>Select the Operations tab, then select <emphasis
            role="bold">Dynamic ESDL</emphasis>.</para>

            <para><figure>
                <title>Dynamic ESDL in ECLWatch</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="images/desdl-ECLWatch1.jpg" />
                  </imageobject>
                </mediaobject>
              </figure></para>
          </listitem>

          <listitem>
            <para><?dbfo keep-together="always"?>Select the <emphasis
            role="bold">Dynamic ESDL</emphasis> Tab, then expand
            <emphasis>myesp</emphasis> by clicking on the triangle next to
            it.</para>

            <figure>
              <title>Add Binding</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/desdl-addBinding.jpg" />
                </imageobject>
              </mediaobject>
            </figure>

            <para></para>
          </listitem>

          <listitem>
            <para>Press the <emphasis role="bold">Add Binding</emphasis>
            button, then select <emphasis>MathService.1</emphasis> from the
            drop list and press the <emphasis role="bold">Apply</emphasis>
            button.</para>

            <para></para>
          </listitem>

          <listitem>
            <para>Select the <emphasis role="bold">Binding</emphasis> tab,
            then expand <emphasis>AddThis</emphasis> by clicking on the
            triangle next to it.</para>

            <para></para>
          </listitem>

          <listitem>
            <para>Provide the Method Configuration (in XML format) in the text
            box.</para>

            <para><emphasis role="bold">Note: You must replace
            &lt;RoxieIPRange&gt; with the IP Range of your Roxie
            servers.</emphasis></para>

            <programlisting>&lt;Method name="AddThis"
        queryname="AddThis"
        querytype="roxie"
        url="http://<emphasis role="bold">&lt;RoxieIPRange&gt;</emphasis>:9876"/&gt;
</programlisting>

            <figure>
              <title>Method Configuration</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/desdl-methodConfiguration.jpg" />
                </imageobject>
              </mediaobject>
            </figure>
          </listitem>

          <listitem>
            <para>Press the <emphasis role="bold">Save</emphasis>
            button.</para>
          </listitem>

          <listitem>
            <para>Test the service using the new interface:<programlisting>http://&lt;<emphasis>node ip </emphasis>&gt;:8003</programlisting></para>
          </listitem>
        </orderedlist></para>
    </sect1>
  </chapter>

  <xi:include href="HPCCClientTools/CT_Mods/CT_ESDL_CLI.xml"
              xpointer="xpointer(//*[@id='ESDL_CLI'])"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <!-- Moved the ESDL Language Reference to a separate book -->
</book>
